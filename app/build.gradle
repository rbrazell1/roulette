apply plugin: 'com.android.application'
apply plugin: 'androidx.navigation.safeargs'

android {
    compileSdkVersion 30
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "edu.cnm.deepdive.roulette"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        'room.schemaLocation': "$projectDir/schemas".toString()
                ]
            }
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    //noinspection GroovyAssignabilityCheck
    buildFeatures {
        //noinspection GroovyAssignabilityCheck
        viewBinding true
    }
}

dependencies {
    // .jar-based local libraries in Libs directory
    implementation fileTree(dir: "libs", include: ["*.jar"])

    // Basic Android Jetpack support
    implementation 'androidx.core:core:1.3.2'
    implementation 'androidx.media:media:1.2.1'
    implementation 'androidx.legacy:legacy-support-core-utils:1.0.0'
    implementation 'androidx.legacy:legacy-support-core-ui:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'

    // Basic Android UI components
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    def recyclerViewVersion = '1.1.0'
    implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"
    implementation "androidx.recyclerview:recyclerview-selection:$recyclerViewVersion"

    // Preferences/settings Library
    implementation 'androidx.preference:preference:1.1.1'

    // Fragment navigation
    implementation 'androidx.fragment:fragment:1.3.2'
    implementation "androidx.navigation:navigation-fragment:$navigationVersion"
    implementation "androidx.navigation:navigation-ui:$navigationVersion"

    // Lifecycle (LiveData & ViewModel)
    def lifecycleVersion = '2.3.1'
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"

    // Material Design components
    implementation 'com.google.android.material:material:1.3.0'

    // Google Sign-in components
    implementation 'com.google.android.gms:play-services-auth:19.0.0'

    // Gson (Google JSON)
    implementation 'com.google.code.gson:gson:2.8.6'

    // ReactiveX components
    implementation 'io.reactivex.rxjava2:rxjava:2.2.20'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    // Room Components
    def roomVersion = '2.2.6'
    implementation "androidx.room:room-runtime:$roomVersion"
    annotationProcessor "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-rxjava2:$roomVersion"

    // Stetho (inspection)
    implementation 'com.facebook.stetho:stetho:1.5.1'

    // Testing
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

}

task generateApiDoc() {
    group "reporting"
    description "Generates all Javadoc"
}

android.applicationVariants.all { variant ->
    def task = project.tasks.create("generate${variant.name.capitalize()}Javadoc", Javadoc) {
        title "Roulette (${project.android.defaultConfig.versionName})"
        group "ApiDoc"
        description "Generates Javadoc for $variant.name."

        source = variant.sourceSets.collect { it.java.sourceFiles }.inject { m, i -> m + i }

        doFirst {
            classpath = project.files(
                    project.file(projectDir)
                            .toPath()
                            .resolve("build/intermediates/javac/${variant.name}/classes"),
                    variant.javaCompileProvider
                            .get()
                            .classpath
                            .files,
                    project.android.
                            getBootClasspath())
        }

        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }

        exclude '**/R'
        exclude '**/R.**'
        exclude '**/R\$**'
        exclude '**/BuildConfig*'

        destinationDir = file("$projectDir/../docs/api")

        options {
            windowTitle = "Roulette (${project.android.defaultConfig.versionName})"
            memberLevel = JavadocMemberLevel.PROTECTED
            linkSource = false
//        set linkSource to true to share with other team members
            author = false
            links 'https://docs.oracle.com/javase/8/docs/api/'
            links 'http://reactivex.io/RxJava/javadoc/'
            links 'https://www.javadoc.io/doc/com.google.code.gson/gson/latest/'
            linksOffline 'https://developer.android.com/reference', "$projectDir/.."
        }

        failOnError true
    }

    task.dependsOn "assemble${variant.name.capitalize()}"

}